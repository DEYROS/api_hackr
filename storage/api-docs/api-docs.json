{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation hackr",
        "description": "API for 'hacking' ! Thx Kevin Niel for this awesome Idea.",
        "version": "1.0.0"
    },
    "paths": {
        "/api/auth/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "operationId": "d764dd091cc4494ae0baf360b03319f3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "User's name",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "User's email",
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "password": {
                                        "description": "User's password",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered successfully"
                    },
                    "400": {
                        "description": "Validation error"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Log in a user",
                "operationId": "8dcb70df1020986038d098cc08d05dae",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "User's email",
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "password": {
                                        "description": "User's password",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "description": "JWT access token",
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "description": "Type of the token, e.g., Bearer",
                                            "type": "string"
                                        },
                                        "expires_in": {
                                            "description": "Expiration time in seconds",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/api/auth/me": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "Get the authenticated user",
                "operationId": "b9abb1a7a74670a19c215c2c133f14d8",
                "responses": {
                    "200": {
                        "description": "Authenticated user details"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Log out the authenticated user",
                "operationId": "69281b12abb272c76871f19cb17ca563",
                "responses": {
                    "200": {
                        "description": "Successfully logged out"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/auth/refresh": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh the authentication token",
                "operationId": "b2eae7a8032954d25b46c7ec6f489c68",
                "responses": {
                    "200": {
                        "description": "Token refreshed"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/crawl-person": {
            "post": {
                "tags": [
                    "Func - Crawler"
                ],
                "summary": "Retrieve information about a person using their name, surname or pseudonym",
                "operationId": "e0a4963762a15bcd22c443c8b536efa0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name, surname, or pseudonym of the person to search",
                                        "type": "string",
                                        "example": "John Doe"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Information retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "403": {
                        "description": "User does not have the necessary functionality"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/ddos": {
            "post": {
                "tags": [
                    "Func - DDoS"
                ],
                "summary": "Simulate a DDoS attack by sending HTTP requests to an IP address with an optional port (maximum 30 requests)",
                "operationId": "30955d71086602ddaf45021a6c9a71a4",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "ip": {
                                        "description": "The IP address (with optional port) to send requests to",
                                        "type": "string"
                                    },
                                    "count": {
                                        "description": "The number of times to send the request (maximum 30)",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "DDoS simulation complete"
                    },
                    "400": {
                        "description": "Invalid input or too many requests"
                    },
                    "403": {
                        "description": "User does not have the necessary functionality"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/crawl-domains": {
            "post": {
                "tags": [
                    "Func - Domain"
                ],
                "summary": "Retrieve all domains and subdomains associated with a main domain",
                "operationId": "d770be8542c944608d053797a9d9d536",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "domain": {
                                        "description": "The main domain to search for subdomains",
                                        "type": "string",
                                        "example": "example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Domains retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid input"
                    },
                    "403": {
                        "description": "User does not have the necessary functionality"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/verify-email": {
            "get": {
                "tags": [
                    "Func - Email Existence"
                ],
                "summary": "Verify an email address",
                "operationId": "0ceb331b331672e9dfe93dedf75d74dc",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The email address to verify",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verification result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email_exist": {
                                            "description": "Whether the email exists or not",
                                            "type": "boolean"
                                        },
                                        "result": {
                                            "description": "Detailed verification result",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Email is required",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User does not have the necessary functionality",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/fake-identity": {
            "get": {
                "tags": [
                    "Func - Fake Identity"
                ],
                "summary": "Generate a fake identity",
                "operationId": "aac3c18995b897bc66c8b3593e9ab54e",
                "responses": {
                    "200": {
                        "description": "Fake identity generated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "example": "John Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john.doe@example.com"
                                        },
                                        "phone": {
                                            "type": "string",
                                            "example": "+1-202-555-0125"
                                        },
                                        "address": {
                                            "type": "string",
                                            "example": "1234 Elm Street, Springfield, IL 62701"
                                        },
                                        "jobTitle": {
                                            "type": "string",
                                            "example": "Software Developer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User does not have the necessary functionality",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Tu ne peux pas faire ça, il te manque la fonctionnalité !"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error while generating the fake identity"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/{user}/functionalities": {
            "post": {
                "tags": [
                    "Functionality"
                ],
                "summary": "Add functionality to a user",
                "operationId": "a9fbdc5b10fb356655eee7cf0f750a15",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user to add functionality to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "functionality": {
                                        "description": "The name of the functionality to add",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Functionality added successfully"
                    },
                    "400": {
                        "description": "Validation error or functionality not found"
                    },
                    "403": {
                        "description": "Unauthorized access"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/{user}/functionalities/{functionality}": {
            "delete": {
                "tags": [
                    "Functionality"
                ],
                "summary": "Remove functionality from a user",
                "operationId": "ee49a44629ccf8c43a6a7453a332fd9d",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "The ID of the user to remove functionality from",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "functionality",
                        "in": "path",
                        "description": "The name of the functionality to remove",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Functionality removed successfully"
                    },
                    "400": {
                        "description": "Validation error or functionality not associated with the user"
                    },
                    "403": {
                        "description": "Unauthorized access"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/random-image": {
            "get": {
                "tags": [
                    "Func - Random Image"
                ],
                "summary": "Download a random image",
                "operationId": "4af2636b38cc8e1d8ed957ec789b8775",
                "responses": {
                    "200": {
                        "description": "Image downloaded successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Image downloaded successfully!"
                                        },
                                        "url": {
                                            "type": "string",
                                            "example": "storage/random-images/1673639203948.jpg"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User does not have the necessary functionality",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Tu ne peux pas faire ça, il te manque la fonctionnalité !"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Error while downloading the image"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/logs": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get all logs",
                "operationId": "f6af6e6d1c3976704d6cdeb29a6f4921",
                "responses": {
                    "200": {
                        "description": "Logs retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users/{user}/logs": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get logs for a specific user",
                "operationId": "6a99ce197cb6c0a5b022e9fae0ffb204",
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "description": "User ID to filter logs",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logs retrieved successfully"
                    },
                    "400": {
                        "description": "User ID is required"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/functionalities/{functionality}/logs": {
            "get": {
                "tags": [
                    "Logs"
                ],
                "summary": "Get logs for a specific functionality, optionally filtered by user",
                "operationId": "ccd2fe1fb1146e73026949e27ed5d9ca",
                "parameters": [
                    {
                        "name": "functionality",
                        "in": "path",
                        "description": "Functionality ID to filter logs",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "User ID to further filter logs",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Functionality logs retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid request"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/password/check": {
            "post": {
                "tags": [
                    "Password"
                ],
                "summary": "Check if a password is in the list of most common passwords",
                "operationId": "efa5ff4e3dfab9934694a22ef3879db3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "password": {
                                        "description": "The password to check",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password is secure"
                    },
                    "400": {
                        "description": "Password is too common"
                    },
                    "403": {
                        "description": "User does not have the necessary functionality"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/password/generate": {
            "post": {
                "tags": [
                    "Password"
                ],
                "summary": "Generate a secure password",
                "operationId": "5dc8837f9c03705eef9181411ece457e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "length": {
                                        "description": "Length of the password to generate",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Generated password"
                    },
                    "403": {
                        "description": "User does not have the necessary functionality"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/send-email": {
            "post": {
                "tags": [
                    "Func - Email Sending"
                ],
                "summary": "Send an email to a recipient multiple times",
                "description": "Send an email multiple times based on the given count.",
                "operationId": "d6569dad9c1db0a8120fc226d3508084",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "description": "The email address to send the message to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message",
                        "in": "query",
                        "description": "The message content to send",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The number of times to send the email",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email successfully sent multiple times",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "description": "Success message",
                                            "type": "string"
                                        },
                                        "count": {
                                            "description": "Number of emails sent",
                                            "type": "integer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Missing parameters",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden - Missing functionality access",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "operationId": "4db02f0d9ccd97469981e0cb03d1a41e",
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Enter your bearer token in the format: Bearer {token}",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Auth"
        },
        {
            "name": "Func - Crawler",
            "description": "Func - Crawler"
        },
        {
            "name": "Func - DDoS",
            "description": "Func - DDoS"
        },
        {
            "name": "Func - Domain",
            "description": "Func - Domain"
        },
        {
            "name": "Func - Email Existence",
            "description": "Func - Email Existence"
        },
        {
            "name": "Func - Fake Identity",
            "description": "Func - Fake Identity"
        },
        {
            "name": "Functionality",
            "description": "Functionality"
        },
        {
            "name": "Func - Random Image",
            "description": "Func - Random Image"
        },
        {
            "name": "Logs",
            "description": "Logs"
        },
        {
            "name": "Password",
            "description": "Password"
        },
        {
            "name": "Func - Email Sending",
            "description": "Func - Email Sending"
        },
        {
            "name": "Users",
            "description": "Users"
        }
    ]
}